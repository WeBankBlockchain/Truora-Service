package com.webank.truora.contract.bcos3.simplevrf;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.v3.client.Client;
import org.fisco.bcos.sdk.v3.codec.abi.FunctionEncoder;
import org.fisco.bcos.sdk.v3.codec.datatypes.Address;
import org.fisco.bcos.sdk.v3.codec.datatypes.Bool;
import org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes;
import org.fisco.bcos.sdk.v3.codec.datatypes.Event;
import org.fisco.bcos.sdk.v3.codec.datatypes.Function;
import org.fisco.bcos.sdk.v3.codec.datatypes.Type;
import org.fisco.bcos.sdk.v3.codec.datatypes.TypeReference;
import org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple4;
import org.fisco.bcos.sdk.v3.contract.Contract;
import org.fisco.bcos.sdk.v3.crypto.CryptoSuite;
import org.fisco.bcos.sdk.v3.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.v3.model.CryptoType;
import org.fisco.bcos.sdk.v3.model.TransactionReceipt;
import org.fisco.bcos.sdk.v3.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.v3.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class VRF25519Core extends Contract {
    public static final String[] BINARY_ARRAY = {"","","50505050905090810190601f168015611b245780820380516001836020036101000a031916815260200191505b509650505050505050604080518083038186803b158015611b4457600080fd5b505afa158015611b58573d6000803e3d6000fd5b505050506040513d6040811015611b6e57600080fd5b81019080805190602001909291908051906020019092919050505080975081935050507feb42c713a1255b5c9d53a46d34d61aeda5941e7dc672d8901244fda68f63317d82848f8f8a6040518086151515158152602001806020018060200180602001858152602001848103845288818151815260200191508051906020019080838360005b83811015611c0f578082015181840152602081019050611bf4565b50505050905090810190601f168015611c3c5780820380516001836020036101000a031916815260200191505b50848103835287818151815260200191508051906020019080838360005b83811015611c75578082015181840152602081019050611c5a565b50505050905090810190601f168015611ca25780820380516001836020036101000a031916815260200191505b50848103825286818151815260200191508051906020019080838360005b83811015611cdb578082015181840152602081019050611cc0565b50505050905090810190601f168015611d085780820380516001836020036101000a031916815260200191505b509850505050505050505060405180910390a16001151582151514611d95576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f70726f6f6620636865636b206661696c6564210000000000000000000000000081525060200191505060405180910390fd5b5050505050945094509450949050565b60008060405180806120a16023913960230190506040518091039020905060608186866040516024018083815260200182815260200192505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050905060008473ffffffffffffffffffffffffffffffffffffffff16826040518082805190602001908083835b60208310611e8b5780518252602082019150602081019050602083039250611e68565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114611eed576040519150601f19603f3d011682016040523d82523d6000602084013e611ef2565b606091505b505090508093505050509392505050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611f89576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602681526020018061207b6026913960400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6040518060400160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160008019168152509056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f206164647265737363616c6c6261636b52616e646f6d6e65737328627974657333322c75696e7432353629a2646970667358221220396dacbb00ff0cf00ca0c8082d6428357d556b52a57c1071f34e1762106df9d464736f6c634300060a0033"};

    public static final String BINARY = org.fisco.bcos.sdk.v3.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"","","90508073ffffffffffffffffffffffffffffffffffffffff16634faabf6e848f8f6040518463ffffffff1660e01b815260040180806020018060200180602001848103845287818151815260200191508051906020019080838360005b83811015611b6f578082015181840152602081019050611b54565b50505050905090810190601f168015611b9c5780820380516001836020036101000a031916815260200191505b50848103835286818151815260200191508051906020019080838360005b83811015611bd5578082015181840152602081019050611bba565b50505050905090810190601f168015611c025780820380516001836020036101000a031916815260200191505b50848103825285818151815260200191508051906020019080838360005b83811015611c3b578082015181840152602081019050611c20565b50505050905090810190601f168015611c685780820380516001836020036101000a031916815260200191505b509650505050505050604080518083038186803b158015611c8857600080fd5b505afa158015611c9c573d6000803e3d6000fd5b505050506040513d6040811015611cb257600080fd5b81019080805190602001909291908051906020019092919050505080975081935050507f36c5e9d4ba3de7bf4927310e0434e48cf4678d81d750d1f7d8cdf3f094ccce0582848f8f8a6040518086151515158152602001806020018060200180602001858152602001848103845288818151815260200191508051906020019080838360005b83811015611d53578082015181840152602081019050611d38565b50505050905090810190601f168015611d805780820380516001836020036101000a031916815260200191505b50848103835287818151815260200191508051906020019080838360005b83811015611db9578082015181840152602081019050611d9e565b50505050905090810190601f168015611de65780820380516001836020036101000a031916815260200191505b50848103825286818151815260200191508051906020019080838360005b83811015611e1f578082015181840152602081019050611e04565b50505050905090810190601f168015611e4c5780820380516001836020036101000a031916815260200191505b509850505050505050505060405180910390a16001151582151514611ed9576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f70726f6f6620636865636b206661696c6564210000000000000000000000000081525060200191505060405180910390fd5b5050505050945094509450949050565b60008060405180806120a16023913960230190506040518091039020905060608186866040516024018083815260200182815260200192505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050905060008473ffffffffffffffffffffffffffffffffffffffff16826040518082805190602001908083835b60208310611fcf5780518252602082019150602081019050602083039250611fac565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114612031576040519150601f19603f3d011682016040523d82523d6000602084013e612036565b606091505b505090508093505050509392505050565b6040518060400160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160008019168152509056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f206164647265737363616c6c6261636b52616e646f6d6e65737328627974657333322c75696e7432353629a26469706673582212205e4dbebcd400d3a344505490bc36b1d31df1913800dedceebe2b46f7577577ee64736f6c634300060a0033"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.v3.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_chainId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_groupId\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"coreAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"seedAndBlockNum\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"consumerSeed\",\"type\":\"uint256\"}],\"name\":\"RandomnessRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"output\",\"type\":\"uint256\"}],\"name\":\"RandomnessRequestFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"res\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"actualSeed\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_publicKey\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_proof\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"randomness\",\"type\":\"uint256\"}],\"name\":\"doVerify\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"bytes2hex\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_bytes32\",\"type\":\"bytes32\"}],\"name\":\"bytes32ToBytes\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"data\",\"type\":\"bytes32\"}],\"name\":\"bytes32tohex\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"callbacks\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"callbackContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"seedAndBlockNum\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_publicKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_proof\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"preSeed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"fulfillRandomnessRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainIdAndGroupId\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_publicKey\",\"type\":\"bytes\"}],\"name\":\"hashOfKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_consumerSeed\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"randomnessRequest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.v3.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_BYTES2HEX = "bytes2hex";

    public static final String FUNC_BYTES32TOBYTES = "bytes32ToBytes";

    public static final String FUNC_BYTES32TOHEX = "bytes32tohex";

    public static final String FUNC_CALLBACKS = "callbacks";

    public static final String FUNC_FULFILLRANDOMNESSREQUEST = "fulfillRandomnessRequest";

    public static final String FUNC_GETCHAINIDANDGROUPID = "getChainIdAndGroupId";

    public static final String FUNC_HASHOFKEY = "hashOfKey";

    public static final String FUNC_ISOWNER = "isOwner";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_RANDOMNESSREQUEST = "randomnessRequest";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event RANDOMNESSREQUEST_EVENT = new Event("RandomnessRequest", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event RANDOMNESSREQUESTFULFILLED_EVENT = new Event("RandomnessRequestFulfilled", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event DOVERIFY_EVENT = new Event("doVerify", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}, new TypeReference<DynamicBytes>() {}, new TypeReference<DynamicBytes>() {}, new TypeReference<DynamicBytes>() {}, new TypeReference<Uint256>() {}));
    ;

    protected VRF25519Core(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public static String getABI() {
        return ABI;
    }

    public List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<RandomnessRequestEventResponse> getRandomnessRequestEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(RANDOMNESSREQUEST_EVENT, transactionReceipt);
        ArrayList<RandomnessRequestEventResponse> responses = new ArrayList<RandomnessRequestEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RandomnessRequestEventResponse typedResponse = new RandomnessRequestEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.coreAddress = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.keyHash = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.seed = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.blockNumber = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.sender = (String) eventValues.getNonIndexedValues().get(4).getValue();
            typedResponse.requestId = (byte[]) eventValues.getNonIndexedValues().get(5).getValue();
            typedResponse.seedAndBlockNum = (byte[]) eventValues.getNonIndexedValues().get(6).getValue();
            typedResponse.consumerSeed = (BigInteger) eventValues.getNonIndexedValues().get(7).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<RandomnessRequestFulfilledEventResponse> getRandomnessRequestFulfilledEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(RANDOMNESSREQUESTFULFILLED_EVENT, transactionReceipt);
        ArrayList<RandomnessRequestFulfilledEventResponse> responses = new ArrayList<RandomnessRequestFulfilledEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RandomnessRequestFulfilledEventResponse typedResponse = new RandomnessRequestFulfilledEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.requestId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.output = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<DoVerifyEventResponse> getDoVerifyEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(DOVERIFY_EVENT, transactionReceipt);
        ArrayList<DoVerifyEventResponse> responses = new ArrayList<DoVerifyEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DoVerifyEventResponse typedResponse = new DoVerifyEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.res = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.actualSeed = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse._publicKey = (byte[]) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse._proof = (byte[]) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.randomness = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public String bytes2hex(byte[] data) throws ContractException {
        final Function function = new Function(FUNC_BYTES2HEX, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes(data)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt bytes32ToBytes(byte[] _bytes32) {
        final Function function = new Function(
                FUNC_BYTES32TOBYTES, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32(_bytes32)), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return executeTransaction(function);
    }

    public String bytes32ToBytes(byte[] _bytes32, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_BYTES32TOBYTES, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32(_bytes32)), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForBytes32ToBytes(byte[] _bytes32) {
        final Function function = new Function(
                FUNC_BYTES32TOBYTES, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32(_bytes32)), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return createSignedTransaction(function);
    }

    public Tuple1<byte[]> getBytes32ToBytesInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_BYTES32TOBYTES, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<byte[]>(

                (byte[]) results.get(0).getValue()
                );
    }

    public Tuple1<byte[]> getBytes32ToBytesOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_BYTES32TOBYTES, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<byte[]>(

                (byte[]) results.get(0).getValue()
                );
    }

    public String bytes32tohex(byte[] data) throws ContractException {
        final Function function = new Function(FUNC_BYTES32TOHEX, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32(data)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public Tuple2<String, byte[]> callbacks(byte[] param0) throws ContractException {
        final Function function = new Function(FUNC_CALLBACKS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Bytes32>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple2<String, byte[]>(
                (String) results.get(0).getValue(), 
                (byte[]) results.get(1).getValue());
    }

    public TransactionReceipt fulfillRandomnessRequest(byte[] _publicKey, byte[] _proof,
            BigInteger preSeed, BigInteger blockNumber) {
        final Function function = new Function(
                FUNC_FULFILLRANDOMNESSREQUEST, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes(_publicKey), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes(_proof), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(preSeed), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(blockNumber)), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return executeTransaction(function);
    }

    public String fulfillRandomnessRequest(byte[] _publicKey, byte[] _proof, BigInteger preSeed,
            BigInteger blockNumber, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_FULFILLRANDOMNESSREQUEST, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes(_publicKey), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes(_proof), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(preSeed), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(blockNumber)), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForFulfillRandomnessRequest(byte[] _publicKey, byte[] _proof,
            BigInteger preSeed, BigInteger blockNumber) {
        final Function function = new Function(
                FUNC_FULFILLRANDOMNESSREQUEST, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes(_publicKey), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes(_proof), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(preSeed), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(blockNumber)), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return createSignedTransaction(function);
    }

    public Tuple4<byte[], byte[], BigInteger, BigInteger> getFulfillRandomnessRequestInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_FULFILLRANDOMNESSREQUEST, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}, new TypeReference<DynamicBytes>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple4<byte[], byte[], BigInteger, BigInteger>(

                (byte[]) results.get(0).getValue(), 
                (byte[]) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue(), 
                (BigInteger) results.get(3).getValue()
                );
    }

    public Tuple2<String, String> getChainIdAndGroupId() throws ContractException {
        final Function function = new Function(FUNC_GETCHAINIDANDGROUPID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple2<String, String>(
                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue());
    }

    public TransactionReceipt hashOfKey(byte[] _publicKey) {
        final Function function = new Function(
                FUNC_HASHOFKEY, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes(_publicKey)), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return executeTransaction(function);
    }

    public String hashOfKey(byte[] _publicKey, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_HASHOFKEY, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes(_publicKey)), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForHashOfKey(byte[] _publicKey) {
        final Function function = new Function(
                FUNC_HASHOFKEY, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes(_publicKey)), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return createSignedTransaction(function);
    }

    public Tuple1<byte[]> getHashOfKeyInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_HASHOFKEY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<byte[]>(

                (byte[]) results.get(0).getValue()
                );
    }

    public Tuple1<byte[]> getHashOfKeyOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_HASHOFKEY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<byte[]>(

                (byte[]) results.get(0).getValue()
                );
    }

    public Boolean isOwner() throws ContractException {
        final Function function = new Function(FUNC_ISOWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public String owner() throws ContractException {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt randomnessRequest(byte[] _keyHash, BigInteger _consumerSeed,
            String _sender) {
        final Function function = new Function(
                FUNC_RANDOMNESSREQUEST, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32(_keyHash), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(_consumerSeed), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.Address(_sender)), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return executeTransaction(function);
    }

    public String randomnessRequest(byte[] _keyHash, BigInteger _consumerSeed, String _sender,
            TransactionCallback callback) {
        final Function function = new Function(
                FUNC_RANDOMNESSREQUEST, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32(_keyHash), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(_consumerSeed), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.Address(_sender)), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRandomnessRequest(byte[] _keyHash,
            BigInteger _consumerSeed, String _sender) {
        final Function function = new Function(
                FUNC_RANDOMNESSREQUEST, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32(_keyHash), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(_consumerSeed), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.Address(_sender)), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return createSignedTransaction(function);
    }

    public Tuple3<byte[], BigInteger, String> getRandomnessRequestInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_RANDOMNESSREQUEST, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<byte[], BigInteger, String>(

                (byte[]) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (String) results.get(2).getValue()
                );
    }

    public Tuple1<Boolean> getRandomnessRequestOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_RANDOMNESSREQUEST, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public TransactionReceipt transferOwnership(String newOwner) {
        final Function function = new Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.Address(newOwner)), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return executeTransaction(function);
    }

    public String transferOwnership(String newOwner, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.Address(newOwner)), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForTransferOwnership(String newOwner) {
        final Function function = new Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.Address(newOwner)), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return createSignedTransaction(function);
    }

    public Tuple1<String> getTransferOwnershipInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public static VRF25519Core load(String contractAddress, Client client,
            CryptoKeyPair credential) {
        return new VRF25519Core(contractAddress, client, credential);
    }

    public static VRF25519Core deploy(Client client, CryptoKeyPair credential, String _chainId,
            String _groupId) throws ContractException {
        byte[] encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_chainId), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_groupId)));
        return deploy(VRF25519Core.class, client, credential, getBinary(client.getCryptoSuite()), getABI(), encodedConstructor, null);
    }

    public static class OwnershipTransferredEventResponse {
        public TransactionReceipt.Logs log;

        public String previousOwner;

        public String newOwner;
    }

    public static class RandomnessRequestEventResponse {
        public TransactionReceipt.Logs log;

        public String coreAddress;

        public byte[] keyHash;

        public BigInteger seed;

        public BigInteger blockNumber;

        public String sender;

        public byte[] requestId;

        public byte[] seedAndBlockNum;

        public BigInteger consumerSeed;
    }

    public static class RandomnessRequestFulfilledEventResponse {
        public TransactionReceipt.Logs log;

        public byte[] requestId;

        public BigInteger output;
    }

    public static class DoVerifyEventResponse {
        public TransactionReceipt.Logs log;

        public Boolean res;

        public byte[] actualSeed;

        public byte[] _publicKey;

        public byte[] _proof;

        public BigInteger randomness;
    }
}
