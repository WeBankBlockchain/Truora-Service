package com.webank.truora.contract.bcos3.simplevrf;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.v3.client.Client;
import org.fisco.bcos.sdk.v3.codec.datatypes.Bool;
import org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes;
import org.fisco.bcos.sdk.v3.codec.datatypes.Event;
import org.fisco.bcos.sdk.v3.codec.datatypes.Function;
import org.fisco.bcos.sdk.v3.codec.datatypes.Type;
import org.fisco.bcos.sdk.v3.codec.datatypes.TypeReference;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.v3.contract.Contract;
import org.fisco.bcos.sdk.v3.crypto.CryptoSuite;
import org.fisco.bcos.sdk.v3.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.v3.model.CryptoType;
import org.fisco.bcos.sdk.v3.model.TransactionReceipt;
import org.fisco.bcos.sdk.v3.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.v3.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class VRFTest extends Contract {
    public static final String[] BINARY_ARRAY = {"","081415610ffb576000808191508090509450945050505061104c565b6110098b8b60018a8a611157565b809350819450829550505050611038565b61102b8b8b60018c8c60018c611276565b8093508194508295505050505b611044838383896110fc565b945094505050505b965096945050505050565b600080600080891415611072578787879250925092506110f0565b6000899050600080905060008090506000600190505b600084146110e257600060018516146110b7576110aa8383838f8f8f8e611276565b8093508194508295505050505b600284816110c157fe5b0493506110d18c8c8c8c8c611157565b809c50819d50829e50505050611088565b828282965096509650505050505b96509650969350505050565b600080600061110b8585611747565b90506000848061111757fe5b82830990506000858061112657fe5b828a0990506000868061113557fe5b878061113d57fe5b8486098a0990508181955095505050505094509492505050565b6000806000808614156111725787878792509250925061126b565b6000848061117c57fe5b898a0990506000858061118b57fe5b898a0990506000868061119a57fe5b898a099050600087806111a957fe5b88806111b157fe5b848e096004099050600088806111c357fe5b89806111cb57fe5b8a806111d357fe5b8586098c098a806111e057fe5b8760030908905088806111ef57fe5b89806111f757fe5b8384088a038a8061120457fe5b838409089450888061121257fe5b898061121a57fe5b8a8061122257fe5b8687096008098a038a8061123257fe5b8b8061123a57fe5b888d0386088409089350888061124c57fe5b898061125457fe5b8c8e09600209925084848497509750975050505050505b955095509592505050565b6000806000808a14801561128a5750600089145b1561129d5786868692509250925061173a565b6000871480156112ad5750600086145b156112c05789898992509250925061173a565b6112c8611861565b84806112d057fe5b898a09816000600481106112e057fe5b60200201818152505084806112f157fe5b816000600481106112fe57fe5b60200201518a098160016004811061131257fe5b602002018181525050848061132357fe5b8687098160026004811061133357fe5b602002018181525050848061134457fe5b8160026004811061135157fe5b602002015187098160036004811061136557fe5b6020020181815250506040518060800160405280868061138157fe5b8360026004811061138e57fe5b60200201518e09815260200186806113a257fe5b836003600481106113af57fe5b60200201518d09815260200186806113c357fe5b836000600481106113d057fe5b60200201518b09815260200186806113e457fe5b836001600481106113f157fe5b60200201518a0981525090508060026004811061140a57fe5b60200201518160006004811061141c57fe5b602002015114158061145057508060036004811061143657fe5b60200201518160016004811061144857fe5b602002015114155b6114c2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f557365206a6163446f75626c652066756e6374696f6e20696e7374656164000081525060200191505060405180910390fd5b6114ca611861565b85806114d257fe5b826000600481106114df57fe5b60200201518703836002600481106114f357fe5b6020020151088160006004811061150657fe5b602002018181525050858061151757fe5b8260016004811061152457fe5b602002015187038360036004811061153857fe5b6020020151088160016004811061154b57fe5b602002018181525050858061155c57fe5b8160006004811061156957fe5b60200201518260006004811061157b57fe5b6020020151098160026004811061158e57fe5b602002018181525050858061159f57fe5b816000600481106115ac57fe5b6020020151826002600481106115be57fe5b602002015109816003600481106115d157fe5b602002018181525050600086806115e457fe5b826003600481106115f157fe5b60200201518803888061160057fe5b8460016004811061160d57fe5b60200201518560016004811061161f57fe5b602002015109089050868061163057fe5b878061163857fe5b888061164057fe5b8460026004811061164d57fe5b60200201518660006004811061165f57fe5b6020020151096002098803820890506000878061167857fe5b888061168057fe5b838a038a8061168b57fe5b8660026004811061169857fe5b6020020151886000600481106116aa57fe5b60200201510908846001600481106116be57fe5b602002015109905087806116ce57fe5b88806116d657fe5b846003600481106116e357fe5b6020020151866001600481106116f557fe5b6020020151098903820890506000888061170b57fe5b898061171357fe5b8b8f098560006004811061172357fe5b602002015109905082828297509750975050505050505b9750975097945050505050565b60008083141580156117595750818314155b8015611766575060008214155b6117d8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f496e76616c6964206e756d62657200000000000000000000000000000000000081525060200191505060405180910390fd5b6000809050600060019050600084905060005b60008714611832578682816117fc57fe5b04905082868061180857fe5b878061181057fe5b85840988038608809450819550505086878202830380985081935050506117eb565b8394505050505092915050565b6040518060400160405280600290602082028036833780820191505090505090565b604051806080016040528060049060208202803683378082019150509050509056fe034e5f5cfbc4d5bf5631e3c3b689f94b2981e3deb6e361b8bfcf02a854d9453af6d1d9008536cede12b587c9297bc50c8166f8fc35b8b5c85585001d47237a60c75694bdcdd12de88304a7d32688702abd496e76616c696420636f6d7072657373656420454320706f696e7420707265666978a26469706673582212204ea740f7283fe6c5e0ea735a691ae0786af9a30c9fffa025625061b23737f3e964736f6c634300060a0033"};

    public static final String BINARY = org.fisco.bcos.sdk.v3.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"","081415610ffb576000808191508090509450945050505061104c565b6110098b8b60018a8a611157565b809350819450829550505050611038565b61102b8b8b60018c8c60018c611276565b8093508194508295505050505b611044838383896110fc565b945094505050505b965096945050505050565b600080600080891415611072578787879250925092506110f0565b6000899050600080905060008090506000600190505b600084146110e257600060018516146110b7576110aa8383838f8f8f8e611276565b8093508194508295505050505b600284816110c157fe5b0493506110d18c8c8c8c8c611157565b809c50819d50829e50505050611088565b828282965096509650505050505b96509650969350505050565b600080600061110b8585611747565b90506000848061111757fe5b82830990506000858061112657fe5b828a0990506000868061113557fe5b878061113d57fe5b8486098a0990508181955095505050505094509492505050565b6000806000808614156111725787878792509250925061126b565b6000848061117c57fe5b898a0990506000858061118b57fe5b898a0990506000868061119a57fe5b898a099050600087806111a957fe5b88806111b157fe5b848e096004099050600088806111c357fe5b89806111cb57fe5b8a806111d357fe5b8586098c098a806111e057fe5b8760030908905088806111ef57fe5b89806111f757fe5b8384088a038a8061120457fe5b838409089450888061121257fe5b898061121a57fe5b8a8061122257fe5b8687096008098a038a8061123257fe5b8b8061123a57fe5b888d0386088409089350888061124c57fe5b898061125457fe5b8c8e09600209925084848497509750975050505050505b955095509592505050565b6000806000808a14801561128a5750600089145b1561129d5786868692509250925061173a565b6000871480156112ad5750600086145b156112c05789898992509250925061173a565b6112c8611861565b84806112d057fe5b898a09816000600481106112e057fe5b60200201818152505084806112f157fe5b816000600481106112fe57fe5b60200201518a098160016004811061131257fe5b602002018181525050848061132357fe5b8687098160026004811061133357fe5b602002018181525050848061134457fe5b8160026004811061135157fe5b602002015187098160036004811061136557fe5b6020020181815250506040518060800160405280868061138157fe5b8360026004811061138e57fe5b60200201518e09815260200186806113a257fe5b836003600481106113af57fe5b60200201518d09815260200186806113c357fe5b836000600481106113d057fe5b60200201518b09815260200186806113e457fe5b836001600481106113f157fe5b60200201518a0981525090508060026004811061140a57fe5b60200201518160006004811061141c57fe5b602002015114158061145057508060036004811061143657fe5b60200201518160016004811061144857fe5b602002015114155b6114c2576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f557365206a6163446f75626c652066756e6374696f6e20696e7374656164000081525060200191505060405180910390fd5b6114ca611861565b85806114d257fe5b826000600481106114df57fe5b60200201518703836002600481106114f357fe5b6020020151088160006004811061150657fe5b602002018181525050858061151757fe5b8260016004811061152457fe5b602002015187038360036004811061153857fe5b6020020151088160016004811061154b57fe5b602002018181525050858061155c57fe5b8160006004811061156957fe5b60200201518260006004811061157b57fe5b6020020151098160026004811061158e57fe5b602002018181525050858061159f57fe5b816000600481106115ac57fe5b6020020151826002600481106115be57fe5b602002015109816003600481106115d157fe5b602002018181525050600086806115e457fe5b826003600481106115f157fe5b60200201518803888061160057fe5b8460016004811061160d57fe5b60200201518560016004811061161f57fe5b602002015109089050868061163057fe5b878061163857fe5b888061164057fe5b8460026004811061164d57fe5b60200201518660006004811061165f57fe5b6020020151096002098803820890506000878061167857fe5b888061168057fe5b838a038a8061168b57fe5b8660026004811061169857fe5b6020020151886000600481106116aa57fe5b60200201510908846001600481106116be57fe5b602002015109905087806116ce57fe5b88806116d657fe5b846003600481106116e357fe5b6020020151866001600481106116f557fe5b6020020151098903820890506000888061170b57fe5b898061171357fe5b8b8f098560006004811061172357fe5b602002015109905082828297509750975050505050505b9750975097945050505050565b60008083141580156117595750818314155b8015611766575060008214155b6117d8576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f496e76616c6964206e756d62657200000000000000000000000000000000000081525060200191505060405180910390fd5b6000809050600060019050600084905060005b60008714611832578682816117fc57fe5b04905082868061180857fe5b878061181057fe5b85840988038608809450819550505086878202830380985081935050506117eb565b8394505050505092915050565b6040518060400160405280600290602082028036833780820191505090505090565b604051806080016040528060049060208202803683378082019150509050509056fe496e76616c696420636f6d7072657373656420454320706f696e7420707265666978034e5f5cfbc4d5bf5631e3c3b689f94b2981e3deb6e361b8bfcf02a854d9453af6d1d9008536cede12b587c9297bc50c8166f8fc35b8b5c85585001d47237a60c75694bdcdd12de88304a7d32688702abda2646970667358221220351b4cdc8ac7f1d0c5307707fe9720724a7b8804571089030048553121066d8764736f6c634300060a0033"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.v3.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"vvout\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_bytes32\",\"type\":\"bytes32\"}],\"name\":\"bytes32ToBytes\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vv\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.v3.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_BYTES32TOBYTES = "bytes32ToBytes";

    public static final String FUNC_VV = "vv";

    public static final Event VVOUT_EVENT = new Event("vvout", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    protected VRFTest(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public static String getABI() {
        return ABI;
    }

    public List<VvoutEventResponse> getVvoutEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(VVOUT_EVENT, transactionReceipt);
        ArrayList<VvoutEventResponse> responses = new ArrayList<VvoutEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            VvoutEventResponse typedResponse = new VvoutEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.i = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public TransactionReceipt bytes32ToBytes(byte[] _bytes32) {
        final Function function = new Function(
                FUNC_BYTES32TOBYTES, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32(_bytes32)), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return executeTransaction(function);
    }

    public String bytes32ToBytes(byte[] _bytes32, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_BYTES32TOBYTES, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32(_bytes32)), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForBytes32ToBytes(byte[] _bytes32) {
        final Function function = new Function(
                FUNC_BYTES32TOBYTES, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32(_bytes32)), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return createSignedTransaction(function);
    }

    public Tuple1<byte[]> getBytes32ToBytesInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_BYTES32TOBYTES, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<byte[]>(

                (byte[]) results.get(0).getValue()
                );
    }

    public Tuple1<byte[]> getBytes32ToBytesOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_BYTES32TOBYTES, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<byte[]>(

                (byte[]) results.get(0).getValue()
                );
    }

    public TransactionReceipt vv() {
        final Function function = new Function(
                FUNC_VV, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return executeTransaction(function);
    }

    public String vv(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_VV, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForVv() {
        final Function function = new Function(
                FUNC_VV, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return createSignedTransaction(function);
    }

    public Tuple1<Boolean> getVvOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_VV, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public static VRFTest load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new VRFTest(contractAddress, client, credential);
    }

    public static VRFTest deploy(Client client, CryptoKeyPair credential) throws ContractException {
        return deploy(VRFTest.class, client, credential, getBinary(client.getCryptoSuite()), getABI(), null, null);
    }

    public static class VvoutEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger i;
    }
}
