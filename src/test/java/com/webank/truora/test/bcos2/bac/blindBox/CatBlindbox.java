package com.webank.truora.test.bcos2.bac.blindBox;

import org.fisco.bcos.channel.client.TransactionSucCallback;
import org.fisco.bcos.channel.event.filter.EventLogPushWithDecodeCallback;
import org.fisco.bcos.web3j.abi.EventEncoder;
import org.fisco.bcos.web3j.abi.FunctionEncoder;
import org.fisco.bcos.web3j.abi.FunctionReturnDecoder;
import org.fisco.bcos.web3j.abi.TypeReference;
import org.fisco.bcos.web3j.abi.datatypes.Address;
import org.fisco.bcos.web3j.abi.datatypes.Bool;
import org.fisco.bcos.web3j.abi.datatypes.DynamicArray;
import org.fisco.bcos.web3j.abi.datatypes.DynamicBytes;
import org.fisco.bcos.web3j.abi.datatypes.Event;
import org.fisco.bcos.web3j.abi.datatypes.Function;
import org.fisco.bcos.web3j.abi.datatypes.Type;
import org.fisco.bcos.web3j.abi.datatypes.Utf8String;
import org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32;
import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;
import org.fisco.bcos.web3j.crypto.Credentials;
import org.fisco.bcos.web3j.crypto.EncryptType;
import org.fisco.bcos.web3j.protocol.Web3j;
import org.fisco.bcos.web3j.protocol.core.RemoteCall;
import org.fisco.bcos.web3j.protocol.core.methods.response.Log;
import org.fisco.bcos.web3j.protocol.core.methods.response.TransactionReceipt;
import org.fisco.bcos.web3j.tuples.generated.Tuple1;
import org.fisco.bcos.web3j.tuples.generated.Tuple2;
import org.fisco.bcos.web3j.tuples.generated.Tuple4;
import org.fisco.bcos.web3j.tuples.generated.Tuple6;
import org.fisco.bcos.web3j.tx.Contract;
import org.fisco.bcos.web3j.tx.TransactionManager;
import org.fisco.bcos.web3j.tx.gas.ContractGasProvider;
import org.fisco.bcos.web3j.tx.txdecode.TransactionDecoder;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.fisco.bcos.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version none.
 */
@SuppressWarnings("unchecked")
public class CatBlindbox extends Contract {
    public static final String[] BINARY_ARRAY = {"","","51806040016040529081600082018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561147e5780601f106114535761010080835404028352916020019161147e565b820191906000526020600020905b81548152906001019060200180831161146157829003601f168201915b50505050508152602001600182018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156115205780601f106114f557610100808354040283529160200191611520565b820191906000526020600020905b81548152906001019060200180831161150357829003601f168201915b50505050508152505090506115348361283e565b60004290506000601e805490509050601e6040518060c0016040528083815260200186815260200185600001518152602001848152602001602060008b815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001856020015181525090806001815401808255809150506001900390600052602060002090600602016000909190919091506000820151816000015560208201518160010190805190602001906116129291906138ee565b50604082015181600201908051906020019061162f9291906138ee565b506060820151816003015560808201518160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060a082015181600501908051906020019061169d9291906138ee565b5050506116f26020600089815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682856020015160405180602001604052806000815250611ea4565b507f5360cbf98a3d257ddc33c57948364330a1d78a96c34d08da1e01721bbc73d25e8785856000015185602060008d815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16886020015160405161176796959493929190614fcd565b60405180910390a150505050505050565b600260009054906101000a900460ff16156117c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117bf90615465565b60405180910390fd5b815183511461180c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611803906153a5565b60405180910390fd5b60008090505b83518110156118db57600073ffffffffffffffffffffffffffffffffffffffff1684828151811061183f57fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16141561189e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161189590615205565b60405180910390fd5b6118d0858583815181106118ae57fe5b60200260200101518584815181106118c257fe5b602002602001015185611fb1565b806001019050611812565b5050505050565b60006118f882600061291990919063ffffffff16565b9050919050565b6000600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614905090565b600061199782600161291990919063ffffffff16565b9050919050565b6119a7336129e1565b565b6060600a60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015611a3457602002820191906000526020600020905b815481526020019060010190808311611a20575b50505050509050919050565b600260009054906101000a900460ff1615611a90576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a8790615465565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611aff576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611af6906151a5565b60405180910390fd5b80600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051611bf09190614f97565b60405180910390a35050565b6000611c066109be565b8210611c47576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c3e90615265565b60405180910390fd5b600c8281548110611c5457fe5b90600052602060002001549050919050565b601e8181548110611c7357fe5b9060005260206000209060060201600091509050806000015490806001018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611d255780601f10611cfa57610100808354040283529160200191611d25565b820191906000526020600020905b815481529060010190602001808311611d0857829003601f168201915b505050505090806002018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611dc35780601f10611d9857610100808354040283529160200191611dc3565b820191906000526020600020905b815481529060010190602001808311611da657829003601f168201915b5050505050908060030154908060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806005018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611e8d5780601f10611e6257610100808354040283529160200191611e8d565b820191906000526020600020905b815481529060010190602001808311611e7057829003601f168201915b5050505050905086565b6000601d80549050905090565b6000611eaf336118e2565b611eee576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ee590615225565b60405180910390fd5b611ef9858584612a3b565b611f038484612c24565b60019050949350505050565b606060088054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611fa75780601f10611f7c57610100808354040283529160200191611fa7565b820191906000526020600020905b815481529060010190602001808311611f8a57829003601f168201915b5050505050905090565b600260009054906101000a900460ff1615612001576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ff890615465565b60405180910390fd5b61200b33836125c9565b61204a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612041906150e5565b60405180910390fd5b61205684848484612c98565b61206284848484612eff565b6120a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161209890615105565b60405180910390fd5b50505050565b6120b033611981565b6120ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120e690615245565b60405180910390fd5b600260009054906101000a900460ff1661213e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161213590615385565b60405180910390fd5b6000600260006101000a81548160ff0219169083151502179055507f349b4285cb8dde314c53fd9d8e8e578381a7375e4f76f9dd9fe07f9960f120a4336040516121889190614ea7565b60405180910390a1565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612203576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121fa90615065565b60405180910390fd5b61224a600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020613016565b9050919050565b61225a33611981565b612299576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161229090615245565b60405180910390fd5b600260009054906101000a900460ff16156122e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122e090615465565b60405180910390fd5b6001600260006101000a81548160ff0219169083151502179055507f6f123d3d54c84a7960a573b31c221dcd86e13fd849c5adb0c6ca851468cc1ae4336040516123339190614ea7565b60405180910390a1565b6000600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60606123dc826126be565b","61241b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161241290615405565b60405180910390fd5b600960008381526020019081526020016000208054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156124c25780601f10612497576101008083540402835291602001916124c2565b820191906000526020600020905b8154815290600101906020018083116124a557829003601f168201915b50505050509050919050565b6124d6611929565b612515576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161250c906152c5565b60405180910390fd5b61251e81613024565b50565b61252b8282612919565b1561256b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612562906150c5565b60405180910390fd5b60018260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b60006125d4826126be565b612613576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161260a90615445565b60405180910390fd5b600061261e83610ef5565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061268d57508373ffffffffffffffffffffffffffffffffffffffff1661267584610747565b73ffffffffffffffffffffffffffffffffffffffff16145b8061269e575061269d818561233d565b5b91505092915050565b6126ba6126b383610ef5565b8383613154565b5050565b6000806003600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415915050919050565b61274481600061252190919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167f05e7c881d716bee8cb7ed92293133ba156704252439e5c502c277448f04e20c260405160405180910390a250565b61279e81600161336c90919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167f17eb45856cd2283111eeb8a1dddf8a43121889e3ce798241f96d2afed353eaa360405160405180910390a250565b6127f881600161252190919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167ff4fbb5a5e62a703643fe5be0722720f728980fdde74f11d76eca7e13bdc3301d60405160405180910390a250565b601d6001601d80549050038154811061285357fe5b9060005260206000209060020201601d8260ff168154811061287157fe5b9060005260206000209060020201600082018160000190805460018160011615610100020316600290046128a69291906139d4565b50600182018160010190805460018160011615610100020316600290046128ce9291906139d4565b50905050601d8054806128dd57fe5b6001900381819060005260206000209060020201600080820160006129029190613a5b565b6001820160006129129190613a5b565b5050905550565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561298a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612981906152e5565b60405180910390fd5b8260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6129f581600061336c90919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167faf66545c919a3be306ee446d8f42a9558b5b022620df880517bc9593ec0f2d5260405160405180910390a250565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415612aab576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612aa290615325565b60405180910390fd5b612ab4826126be565b15612af4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612aeb90615345565b60405180910390fd5b826003600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550612b8d600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020613413565b8273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fec17194b787c395cc9a4b1d5c8e4af64ed927684ad21898f1fb21f8818bed71b8585604051612c049291906154a0565b60405180910390a4612c168383613429565b612c1f826134ed565b505050565b612c2d826126be565b612c6c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c63906153c5565b60405180910390fd5b80600960008481526020019081526020016000209080519060200190612c939291906138ee565b505050565b8373ffffffffffffffffffffffffffffffffffffffff16612cb883610ef5565b73ffffffffffffffffffffffffffffffffffffffff1614612d0e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d05906150a5565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415612d7e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d7590615085565b60405180910390fd5b612d8782613536565b612dce600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206135f4565b612e15600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020613413565b826003600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fec17194b787c395cc9a4b1d5c8e4af64ed927684ad21898f1fb21f8818bed71b8585604051612edd9291906154a0565b60405180910390a4612eef8483613617565b612ef98383613429565b50505050565b6000612f208473ffffffffffffffffffffffffffffffffffffffff166137c0565b612f2d576001905061300e565b60008473ffffffffffffffffffffffffffffffffffffffff166331f6f50e338887876040518563ffffffff1660e01b8152600401612f6e9493929190614ec2565b602060405180830381600087803b158015612f8857600080fd5b505af1158015612f9c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fc09190614079565b90506331f6f50e60e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149150505b949350505050565b600081600001549050919050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415613094576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161308b90615125565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600e60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b8273ffffffffffffffffffffffffffffffffffffffff1661317483610ef5565b73ffffffffffffffffffffffffffffffffffffffff16146131ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016131c190615365565b60405180910390fd5b6131d382613536565b61321a600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206135f4565b60006003600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600060096000848152602001908152602001600020805460018160011615610100020316600290049050146132bc576009600083815260200190815260200160002060006132bb9190613a5b565b5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff167fec17194b787c395cc9a4b1d5c8e4af64ed927684ad21898f1fb21f8818bed71b85856040516133339291906154a0565b60405180910390a46133458383613617565b6000600b600084815260200190815260200160002081905550613367826137d3565b505050565b6133768282612919565b6133b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016133ac90615285565b60405180910390fd5b60008260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffff","","","565b9050919050565b600060208201905081810360008301526153fe81614c96565b9050919050565b6000602082019050818103600083015261541e81614cfc565b9050919050565b6000602082019050818103600083015261543e81614d62565b9050919050565b6000602082019050818103600083015261545e81614dc8565b9050919050565b6000602082019050818103600083015261547e81614e2e565b9050919050565b600060208201905061549a6000830184614e7d565b92915050565b60006040820190506154b56000830185614e7d565b81810360208301526154c78184614252565b90509392505050565b600060c0820190506154e56000830189614e7d565b81810360208301526154f7818861428b565b9050818103604083015261550b818761428b565b905061551a6060830186614e7d565b61552760808301856141c7565b81810360a0830152615539818461428b565b9050979650505050505050565b6000604051905081810181811067ffffffffffffffff8211171561556957600080fd5b8060405250919050565b600067ffffffffffffffff82111561558a57600080fd5b602082029050602081019050919050565b600067ffffffffffffffff8211156155b257600080fd5b602082029050602081019050919050565b600067ffffffffffffffff8211156155da57600080fd5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff82111561560657600080fd5b601f19601f8301169050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b6000615697826156e0565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006157158261571c565b9050919050565b60006157278261572e565b9050919050565b6000615739826156e0565b9050919050565b82818337600083830152505050565b60005b8381101561576d578082015181840152602081019050615752565b8381111561577c576000848401525b50505050565b6000601f19601f8301169050919050565b61579c8161568c565b81146157a757600080fd5b50565b6157b38161569e565b81146157be57600080fd5b50565b6157ca816156aa565b81146157d557600080fd5b50565b6157e1816156b4565b81146157ec57600080fd5b50565b6157f881615700565b811461580357600080fd5b5056fea2646970667358221220101392c6b9308c61b6d392f127ae8a1796585d9b918541fbafba0cc0105c1c8e64736f6c634300060a003368747470733a2f2f706963342e7a68696d672e636f6d2f38302f76322d37613466383064373734353139623163663462653462636664353634313432375f31343430772e6a706768747470733a2f2f706963312e7a68696d672e636f6d2f38302f76322d32356538626230333231623738646139353939306263646564623639326330635f31343430772e6a706768747470733a2f2f706963312e7a68696d672e636f6d2f38302f76322d66386430313233393761323638373264663435363239316165313737326235385f31343430772e6a706768747470733a2f2f706963322e7a68696d672e636f6d2f38302f76322d36383338643336363534383736393234643735653863633131353435333939645f31343430772e6a706768747470733a2f2f706963312e7a68696d672e636f6d2f38302f76322d63653361323666663666393663323232613965653933643831373933323864635f31343430772e6a706768747470733a2f2f706963312e7a68696d672e636f6d2f76322d38326336633965613331326562356565623933643766353363386533323539615f31343430772e6a706768747470733a2f2f706963312e7a68696d672e636f6d2f38302f76322d33336635396134333433616262366134396233353237383933373766663564385f31343430772e6a7067"};

    public static final String BINARY = String.join("", BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"randomOracle\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"IssuerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"IssuerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"catName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"name\":\"ResultOfNewBlindboxCat\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Send\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"series\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"birthTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"images\",\"type\":\"string\"}],\"name\":\"SurpriseCat\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Suspended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"SuspenderAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"SuspenderRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"UnSuspended\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addIssuer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addSuspender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"assetByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"assetOfOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"assetOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"}],\"name\":\"assetURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"assetId\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"batchSendFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"destroy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"name\":\"generateBlindBoxCat\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"generatedCats\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"catId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"species\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"birthTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"images\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"catId\",\"type\":\"uint256\"}],\"name\":\"getCatInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isIssuer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isSuspender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"assetURI\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"issueWithAssetURI\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ass","etId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceIssuer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceSuspender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"userProvidedSeed\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"requestNewBlindboxCat\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"sendFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shortName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"suspend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"suspended\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unSuspend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"};

    public static final String ABI = String.join("", ABI_ARRAY);

    public static final TransactionDecoder transactionDecoder = new TransactionDecoder(ABI, BINARY);

    public static final String[] SM_BINARY_ARRAY = {"","03f560048036038101906103f091906140a2565b610f3e565b6040516104029190614e8c565b60405180910390f35b61042560048036038101906104209190613d68565b610ff0565b005b610441600480360381019061043c9190613f6b565b611044565b60405161044e9190614f97565b60405180910390f35b61045f6110af565b005b61046961119b565b6040516104769190614f97565b60405180910390f35b610499600480360381019061049491906140a2565b6111b2565b6040516104ab969594939291906154d0565b60405180910390f35b6104ce60048036038101906104c99190613dcd565b6113e3565b005b6104ea60048036038101906104e591906140a2565b6114d9565b6040516104f79190615485565b60405180910390f35b61051a600480360381019061051591906140f4565b611543565b005b6105366004803603810190610531919061414c565b6115df565b6040516105439190614fb2565b60405180910390f35b61056660048036038101906105619190613e48565b611798565b005b610582600480360381019061057d9190614027565b611902565b005b61059e600480360381019061059991906140a2565b611f71565b6040516105ab9190614e8c565b60405180910390f35b6105ce60048036038101906105c99190613d68565b611ff6565b6040516105db9190615485565b60405180910390f35b6105fe60048036038101906105f99190613d68565b6120b5565b60405161060b9190614f75565b60405180910390f35b61061c61214c565b005b61063860048036038101906106339190613f2f565b612157565b6040516106459190615485565b60405180910390f35b610656612200565b005b610672600480360381019061066d91906140a2565b61220b565b604051610684969594939291906154d0565b60405180910390f35b6106956124c9565b6040516106a29190614f97565b60405180910390f35b6000600c80549050905090565b60006106ce8260006125c990919063ffffffff16565b9050919050565b606060088054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561076d5780601f106107425761010080835404028352916020019161076d565b820191906000526020600020905b81548152906001019060200180831161075057829003601f168201915b5050505050905090565b61077f6124c9565b6107be576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016107b5906153e5565b60405180910390fd5b6107c781612691565b50565b600260009054906101000a900460ff161561081a576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040161081190615125565b60405180910390fd5b600061082582610f3e565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610896576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040161088d90615085565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806108d657506108d58133610c98565b5b610915576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040161090c906152c5565b60405180910390fd5b826004600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167fd1e45707b3f71c77903b61f04c900f772db264b9bf618f1cc3308fb516eb616984846040516109af929190614f4c565b60405180910390a2505050565b60006109d28260016125c990919063ffffffff16565b9050919050565b6109e2336106b8565b610a21576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401610a1890615425565b60405180910390fd5b610a2a816127c1565b50565b600260009054906101000a900460ff1615610a7d576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401610a7490615125565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610aec576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401610ae390615165565b60405180910390fd5b80600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f34cc9ec6b85c217ac6bd5f7b86411e4e4e40d816d5d17725c4dec1f0901d907483604051610bdd9190614f97565b60405180910390a35050565b606060078054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610c815780601f10610c5657610100808354040283529160200191610c81565b820191906000526020600020905b815481529060010190602001808311610c6457829003601f168201915b5050505050905090565b6000601d80549050905090565b6000600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b610d35336109bc565b610d74576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401610d6b90615105565b60405180910390fd5b600260009054906101000a900460ff16610dc3576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401610dba90615345565b60405180910390fd5b6000600260006101000a81548160ff0219169083151502179055507f49cf6bd0eac7c3496174468c250e85009598e5c78d9a83e07df711d9da5c185a33604051610e0d9190614ea7565b60405180910390a1565b6000600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6060610e4c8261281b565b610e8b576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401610e8290615225565b60405180910390fd5b600960008381526020019081526020016000208054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610f325780601f10610f0757610100808354040283529160200191610f32565b820191906000526020600020905b815481529060010190602001808311610f1557829003601f168201915b50505050509050919050565b6000806003600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610fe7576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401610fde906152e5565b60405180910390fd5b80915050919050565b610ff9336109bc565b611038576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040161102f90615105565b60405180910390fd5b6110418161288d565b50565b600061104f336106b8565b61108e576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040161108590615425565b60405180910390fd5b6110998585846128e7565b6110a38484612ad0565b60019050949350505050565b6110b8336109bc565b6110f7576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016110ee90615105565b60405180910390fd5b600260009054906101000a900460ff1615611147576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040161113e90615125565b60405180910390fd5b6001600260006101000a81548160ff0219169083151502179055507f8773c8f57dc13d3ee6a296fb66e009fe3abc25fce48e4bdeb7583b3064ad35e8336040516111919190614ea7565b60405180910390a1565b6000600260009054906101000a900460ff16905090565b601e81815481106111bf57fe5b9060005260206000209060060201600091509050806000015490806001018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156112715780601f1061124657610100808354040283529160200191611271565b820191906000526020600020905b81548152906001019060200180831161125457829003601f168201915b505050505090806002018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561130f5780601f106112e45761010080835404028352916020019161130f565b820191906000526020600020905b8154815290600101906020018083116112f257829003601f168201915b5050505050908060030154908060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806005018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156113d95780601f106113ae576101008083540402835291602001916113d9565b820191906000526020600020905b8154815290600101906020018083116113bc57829003601f168201915b505050","5050905086565b600260009054906101000a900460ff1615611433576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040161142a90615125565b60405180910390fd5b61143d3383612b44565b61147c576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040161147390615265565b60405180910390fd5b61148884848484612c22565b61149484848484612e89565b6114d3576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016114ca906150a5565b60405180910390fd5b50505050565b60006114e36106ab565b8210611524576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040161151b90615205565b60405180910390fd5b600c828154811061153157fe5b90600052602060002001549050919050565b61154d3384612b44565b61158c576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040161158390615465565b60405180910390fd5b6115da8383838080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050612fa0565b505050565b600080601d8054905011611628576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040161161f90615065565b60405180910390fd5b6000602160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f724a279856040518263ffffffff1660e01b81526004016116859190615485565b602060405180830381600087803b15801561169f57600080fd5b505af11580156116b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116d79190614050565b905082601f600083815260200190815260200160002090805190602001906117009291906138ee565b50336020600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fd74ebf5bb3d2c9b5f2944ba1df32aa8f3fb8747006f15d647b7050159bd269fb33848360405161178693929190614f0e565b60405180910390a18091505092915050565b600260009054906101000a900460ff16156117e8576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016117df90615125565b60405180910390fd5b815183511461182c576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040161182390615145565b60405180910390fd5b60008090505b83518110156118fb57600073ffffffffffffffffffffffffffffffffffffffff1684828151811061185f57fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1614156118be576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016118b590615185565b60405180910390fd5b6118f0858583815181106118ce57fe5b60200260200101518584815181106118e257fe5b6020026020010151856113e3565b806001019050611832565b5050505050565b6000601d805490501161194a576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040161194190615065565b60405180910390fd5b60001515602160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166356ddd8ed836040518263ffffffff1660e01b81526004016119a99190614fb2565b60206040518083038186803b1580156119c157600080fd5b505afa1580156119d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119f99190613ffe565b151514611a3b576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401611a3290615305565b60405180910390fd5b6000602160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b791ee54836040518263ffffffff1660e01b8152600401611a989190614fb2565b60206040518083038186803b158015611ab057600080fd5b505afa158015611ac4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ae891906140cb565b90506000601d805490508281611afa57fe5b0690506060601f60008581526020019081526020016000208054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611ba65780601f10611b7b57610100808354040283529160200191611ba6565b820191906000526020600020905b815481529060010190602001808311611b8957829003601f168201915b50505050509050611bb561396e565b601d8360ff1681548110611bc557fe5b9060005260206000209060020201604051806040016040529081600082018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611c775780601f10611c4c57610100808354040283529160200191611c77565b820191906000526020600020905b815481529060010190602001808311611c5a57829003601f168201915b50505050508152602001600182018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611d195780601f10611cee57610100808354040283529160200191611d19565b820191906000526020600020905b815481529060010190602001808311611cfc57829003601f168201915b5050505050815250509050611d2d83612fb7565b60004290506000601e805490509050601e6040518060c0016040528083815260200186815260200185600001518152602001848152602001602060008b815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200185602001518152509080600181540180825580915050600190039060005260206000209060060201600090919091909150600082015181600001556020820151816001019080519060200190611e0b9291906138ee565b506040820151816002019080519060200190611e289291906138ee565b506060820151816003015560808201518160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060a0820151816005019080519060200190611e969291906138ee565b505050611eeb6020600089815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682856020015160405180602001604052806000815250611044565b507feb4315a7a3c9ad1c229ba2dfd91fc8d73d2518abfe55c1d1e071c46cfbead5548785856000015185602060008d815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168860200151604051611f6096959493929190614fcd565b60405180910390a150505050505050565b6000611f7c8261281b565b611fbb576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401611fb2906151e5565b60405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612067576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040161205e906151c5565b60405180910390fd5b6120ae600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020613092565b9050919050565b6060600a60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561214057602002820191906000526020600020905b81548152602001906001019080831161212c575b50505050509050919050565b612155336130a0565b565b600061216283611ff6565b82106121a3576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040161219a90615285565b60405180910390fd5b600a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002082815481106121ed57fe5b9060005260206000200154905092915050565b612209336130fa565b565b6000606080600080606061221d613988565b601e888154811061222a57fe5b90600052602060002090600602016040518060c001604052908160008201548152602001600182018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156122e65780601f106122bb576101008083540402835291602001916122e6565b820191906000526020600020905b8154815290600101906020018083116122c957829003601f168201915b50505050508152602001600282018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156123885780601f1061235d57610100808354040283529160200191612388565b820191906000526020600020905b81548152906001019060200180831161236b57829003601f168201915b50505050508152602001600382015481526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffff","","","","565b9050919050565b600060208201905081810360008301526153fe81614cbc565b9050919050565b6000602082019050818103600083015261541e81614cfc565b9050919050565b6000602082019050818103600083015261543e81614d62565b9050919050565b6000602082019050818103600083015261545e81614dc8565b9050919050565b6000602082019050818103600083015261547e81614e08565b9050919050565b600060208201905061549a6000830184614e7d565b92915050565b60006040820190506154b56000830185614e7d565b81810360208301526154c78184614252565b90509392505050565b600060c0820190506154e56000830189614e7d565b81810360208301526154f7818861428b565b9050818103604083015261550b818761428b565b905061551a6060830186614e7d565b61552760808301856141c7565b81810360a0830152615539818461428b565b9050979650505050505050565b6000604051905081810181811067ffffffffffffffff8211171561556957600080fd5b8060405250919050565b600067ffffffffffffffff82111561558a57600080fd5b602082029050602081019050919050565b600067ffffffffffffffff8211156155b257600080fd5b602082029050602081019050919050565b600067ffffffffffffffff8211156155da57600080fd5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff82111561560657600080fd5b601f19601f8301169050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b6000615697826156e0565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006157158261571c565b9050919050565b60006157278261572e565b9050919050565b6000615739826156e0565b9050919050565b82818337600083830152505050565b60005b8381101561576d578082015181840152602081019050615752565b8381111561577c576000848401525b50505050565b6000601f19601f8301169050919050565b61579c8161568c565b81146157a757600080fd5b50565b6157b38161569e565b81146157be57600080fd5b50565b6157ca816156aa565b81146157d557600080fd5b50565b6157e1816156b4565b81146157ec57600080fd5b50565b6157f881615700565b811461580357600080fd5b5056fea2646970667358221220b05a3b4b0ff11b7517300cac767870cac7e143f0d10cef0d076268019e2a6fe864736f6c634300060a003368747470733a2f2f706963312e7a68696d672e636f6d2f38302f76322d33336635396134333433616262366134396233353237383933373766663564385f31343430772e6a706768747470733a2f2f706963312e7a68696d672e636f6d2f76322d38326336633965613331326562356565623933643766353363386533323539615f31343430772e6a706768747470733a2f2f706963342e7a68696d672e636f6d2f38302f76322d37613466383064373734353139623163663462653462636664353634313432375f31343430772e6a706768747470733a2f2f706963312e7a68696d672e636f6d2f38302f76322d32356538626230333231623738646139353939306263646564623639326330635f31343430772e6a706768747470733a2f2f706963322e7a68696d672e636f6d2f38302f76322d36383338643336363534383736393234643735653863633131353435333939645f31343430772e6a706768747470733a2f2f706963312e7a68696d672e636f6d2f38302f76322d66386430313233393761323638373264663435363239316165313737326235385f31343430772e6a706768747470733a2f2f706963312e7a68696d672e636f6d2f38302f76322d63653361323666663666393663323232613965653933643831373933323864635f31343430772e6a7067"};

    public static final String SM_BINARY = String.join("", SM_BINARY_ARRAY);

    public static final String FUNC_ADDISSUER = "addIssuer";

    public static final String FUNC_ADDSUSPENDER = "addSuspender";

    public static final String FUNC_APPROVE = "approve";

    public static final String FUNC_ASSETBYINDEX = "assetByIndex";

    public static final String FUNC_ASSETOFOWNER = "assetOfOwner";

    public static final String FUNC_ASSETOFOWNERBYINDEX = "assetOfOwnerByIndex";

    public static final String FUNC_ASSETURI = "assetURI";

    public static final String FUNC_BALANCE = "balance";

    public static final String FUNC_BATCHSENDFROM = "batchSendFrom";

    public static final String FUNC_DESCRIPTION = "description";

    public static final String FUNC_DESTROY = "destroy";

    public static final String FUNC_GENERATEBLINDBOXCAT = "generateBlindBoxCat";

    public static final String FUNC_GENERATEDCATS = "generatedCats";

    public static final String FUNC_GETAPPROVED = "getApproved";

    public static final String FUNC_GETCATINFO = "getCatInfo";

    public static final String FUNC_GETLENGTH = "getLength";

    public static final String FUNC_ISAPPROVEDFORALL = "isApprovedForAll";

    public static final String FUNC_ISISSUER = "isIssuer";

    public static final String FUNC_ISOWNER = "isOwner";

    public static final String FUNC_ISSUSPENDER = "isSuspender";

    public static final String FUNC_ISSUEWITHASSETURI = "issueWithAssetURI";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_OWNEROF = "ownerOf";

    public static final String FUNC_RENOUNCEISSUER = "renounceIssuer";

    public static final String FUNC_RENOUNCESUSPENDER = "renounceSuspender";

    public static final String FUNC_REQUESTNEWBLINDBOXCAT = "requestNewBlindboxCat";

    public static final String FUNC_SENDFROM = "sendFrom";

    public static final String FUNC_SETAPPROVALFORALL = "setApprovalForAll";

    public static final String FUNC_SHORTNAME = "shortName";

    public static final String FUNC_SUSPEND = "suspend";

    public static final String FUNC_SUSPENDED = "suspended";

    public static final String FUNC_TOTALSUPPLY = "totalSupply";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_UNSUSPEND = "unSuspend";

    public static final Event APPROVAL_EVENT = new Event("Approval", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event APPROVALFORALL_EVENT = new Event("ApprovalForAll", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Bool>() {}));
    ;

    public static final Event ISSUERADDED_EVENT = new Event("IssuerAdded", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));
    ;

    public static final Event ISSUERREMOVED_EVENT = new Event("IssuerRemoved", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event RESULTOFNEWBLINDBOXCAT_EVENT = new Event("ResultOfNewBlindboxCat", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Bytes32>() {}));
    ;

    public static final Event SEND_EVENT = new Event("Send", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<DynamicBytes>() {}));
    ;

    public static final Event SURPRISECAT_EVENT = new Event("SurpriseCat", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event SUSPENDED_EVENT = new Event("Suspended", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    public static final Event SUSPENDERADDED_EVENT = new Event("SuspenderAdded", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));
    ;

    public static final Event SUSPENDERREMOVED_EVENT = new Event("SuspenderRemoved", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));
    ;

    public static final Event UNSUSPENDED_EVENT = new Event("UnSuspended", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    @Deprecated
    protected CatBlindbox(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(getBinary(), contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected CatBlindbox(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(getBinary(), contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected CatBlindbox(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(getBinary(), contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected CatBlindbox(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(getBinary(), contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static String getBinary() {
        return (EncryptType.encryptType == EncryptType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public static TransactionDecoder getTransactionDecoder() {
        return transactionDecoder;
    }

    public List<ApprovalEventResponse> getApprovalEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVAL_EVENT, transactionReceipt);
        ArrayList<ApprovalEventResponse> responses = new ArrayList<ApprovalEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            ApprovalEventResponse typedResponse = new ApprovalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.approved = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.assetId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registerApprovalEventLogFilter(String fromBlock, String toBlock, List<String> otherTopics, EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(APPROVAL_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void registerApprovalEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(APPROVAL_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,callback);
    }

    public List<ApprovalForAllEventResponse> getApprovalForAllEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVALFORALL_EVENT, transactionReceipt);
        ArrayList<ApprovalForAllEventResponse> responses = new ArrayList<ApprovalForAllEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registerApprovalForAllEventLogFilter(String fromBlock, String toBlock, List<String> otherTopics, EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(APPROVALFORALL_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void registerApprovalForAllEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(APPROVALFORALL_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,callback);
    }

    public List<IssuerAddedEventResponse> getIssuerAddedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(ISSUERADDED_EVENT, transactionReceipt);
        ArrayList<IssuerAddedEventResponse> responses = new ArrayList<IssuerAddedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            IssuerAddedEventResponse typedResponse = new IssuerAddedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registerIssuerAddedEventLogFilter(String fromBlock, String toBlock, List<String> otherTopics, EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(ISSUERADDED_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void registerIssuerAddedEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(ISSUERADDED_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,callback);
    }

    public List<IssuerRemovedEventResponse> getIssuerRemovedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(ISSUERREMOVED_EVENT, transactionReceipt);
        ArrayList<IssuerRemovedEventResponse> responses = new ArrayList<IssuerRemovedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            IssuerRemovedEventResponse typedResponse = new IssuerRemovedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registerIssuerRemovedEventLogFilter(String fromBlock, String toBlock, List<String> otherTopics, EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(ISSUERREMOVED_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void registerIssuerRemovedEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(ISSUERREMOVED_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,callback);
    }

    public List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registerOwnershipTransferredEventLogFilter(String fromBlock, String toBlock, List<String> otherTopics, EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void registerOwnershipTransferredEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,callback);
    }

    public List<ResultOfNewBlindboxCatEventResponse> getResultOfNewBlindboxCatEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(RESULTOFNEWBLINDBOXCAT_EVENT, transactionReceipt);
        ArrayList<ResultOfNewBlindboxCatEventResponse> responses = new ArrayList<ResultOfNewBlindboxCatEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            ResultOfNewBlindboxCatEventResponse typedResponse = new ResultOfNewBlindboxCatEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sender = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.catName = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.requestId = (byte[]) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registerResultOfNewBlindboxCatEventLogFilter(String fromBlock, String toBlock, List<String> otherTopics, EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(RESULTOFNEWBLINDBOXCAT_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void registerResultOfNewBlindboxCatEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(RESULTOFNEWBLINDBOXCAT_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,callback);
    }

    public List<SendEventResponse> getSendEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(SEND_EVENT, transactionReceipt);
        ArrayList<SendEventResponse> responses = new ArrayList<SendEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            SendEventResponse typedResponse = new SendEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.from = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.assetId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.data = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registerSendEventLogFilter(String fromBlock, String toBlock, List<String> otherTopics, EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(SEND_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void registerSendEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(SEND_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,callback);
    }

    public List<SurpriseCatEventResponse> getSurpriseCatEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(SURPRISECAT_EVENT, transactionReceipt);
        ArrayList<SurpriseCatEventResponse> responses = new ArrayList<SurpriseCatEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            SurpriseCatEventResponse typedResponse = new SurpriseCatEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.requestId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.name = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.series = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.birthTime = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.owner = (String) eventValues.getNonIndexedValues().get(4).getValue();
            typedResponse.images = (String) eventValues.getNonIndexedValues().get(5).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registerSurpriseCatEventLogFilter(String fromBlock, String toBlock, List<String> otherTopics, EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(SURPRISECAT_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void registerSurpriseCatEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(SURPRISECAT_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,callback);
    }

    public List<SuspendedEventResponse> getSuspendedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(SUSPENDED_EVENT, transactionReceipt);
        ArrayList<SuspendedEventResponse> responses = new ArrayList<SuspendedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            SuspendedEventResponse typedResponse = new SuspendedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registerSuspendedEventLogFilter(String fromBlock, String toBlock, List<String> otherTopics, EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(SUSPENDED_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void registerSuspendedEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(SUSPENDED_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,callback);
    }

    public List<SuspenderAddedEventResponse> getSuspenderAddedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(SUSPENDERADDED_EVENT, transactionReceipt);
        ArrayList<SuspenderAddedEventResponse> responses = new ArrayList<SuspenderAddedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            SuspenderAddedEventResponse typedResponse = new SuspenderAddedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registerSuspenderAddedEventLogFilter(String fromBlock, String toBlock, List<String> otherTopics, EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(SUSPENDERADDED_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void registerSuspenderAddedEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(SUSPENDERADDED_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,callback);
    }

    public List<SuspenderRemovedEventResponse> getSuspenderRemovedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(SUSPENDERREMOVED_EVENT, transactionReceipt);
        ArrayList<SuspenderRemovedEventResponse> responses = new ArrayList<SuspenderRemovedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            SuspenderRemovedEventResponse typedResponse = new SuspenderRemovedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registerSuspenderRemovedEventLogFilter(String fromBlock, String toBlock, List<String> otherTopics, EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(SUSPENDERREMOVED_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void registerSuspenderRemovedEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(SUSPENDERREMOVED_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,callback);
    }

    public List<UnSuspendedEventResponse> getUnSuspendedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(UNSUSPENDED_EVENT, transactionReceipt);
        ArrayList<UnSuspendedEventResponse> responses = new ArrayList<UnSuspendedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            UnSuspendedEventResponse typedResponse = new UnSuspendedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registerUnSuspendedEventLogFilter(String fromBlock, String toBlock, List<String> otherTopics, EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(UNSUSPENDED_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void registerUnSuspendedEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(UNSUSPENDED_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,callback);
    }

    public RemoteCall<TransactionReceipt> addIssuer(String account) {
        final Function function = new Function(
                FUNC_ADDISSUER, 
                Arrays.<Type>asList(new Address(account)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void addIssuer(String account, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_ADDISSUER, 
                Arrays.<Type>asList(new Address(account)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String addIssuerSeq(String account) {
        final Function function = new Function(
                FUNC_ADDISSUER, 
                Arrays.<Type>asList(new Address(account)),
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple1<String> getAddIssuerInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADDISSUER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public RemoteCall<TransactionReceipt> addSuspender(String account) {
        final Function function = new Function(
                FUNC_ADDSUSPENDER, 
                Arrays.<Type>asList(new Address(account)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void addSuspender(String account, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_ADDSUSPENDER, 
                Arrays.<Type>asList(new Address(account)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String addSuspenderSeq(String account) {
        final Function function = new Function(
                FUNC_ADDSUSPENDER, 
                Arrays.<Type>asList(new Address(account)),
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple1<String> getAddSuspenderInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADDSUSPENDER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public RemoteCall<TransactionReceipt> approve(String to, BigInteger assetId) {
        final Function function = new Function(
                FUNC_APPROVE, 
                Arrays.<Type>asList(new Address(to),
                new Uint256(assetId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void approve(String to, BigInteger assetId, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_APPROVE, 
                Arrays.<Type>asList(new Address(to),
                new Uint256(assetId)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String approveSeq(String to, BigInteger assetId) {
        final Function function = new Function(
                FUNC_APPROVE, 
                Arrays.<Type>asList(new Address(to),
                new Uint256(assetId)),
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple2<String, BigInteger> getApproveInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_APPROVE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public RemoteCall<BigInteger> assetByIndex(BigInteger index) {
        final Function function = new Function(FUNC_ASSETBYINDEX, 
                Arrays.<Type>asList(new Uint256(index)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<List> assetOfOwner(String owner) {
        final Function function = new Function(FUNC_ASSETOFOWNER, 
                Arrays.<Type>asList(new Address(owner)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<BigInteger> assetOfOwnerByIndex(String owner, BigInteger index) {
        final Function function = new Function(FUNC_ASSETOFOWNERBYINDEX, 
                Arrays.<Type>asList(new Address(owner),
                new Uint256(index)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<String> assetURI(BigInteger assetId) {
        final Function function = new Function(FUNC_ASSETURI, 
                Arrays.<Type>asList(new Uint256(assetId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<BigInteger> balance(String owner) {
        final Function function = new Function(FUNC_BALANCE, 
                Arrays.<Type>asList(new Address(owner)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> batchSendFrom(String from, List<String> to, List<BigInteger> assetId, byte[] data) {
        final Function function = new Function(
                FUNC_BATCHSENDFROM, 
                Arrays.<Type>asList(new Address(from),
                to.isEmpty()? DynamicArray.empty("address[]"):new DynamicArray<Address>(
                        org.fisco.bcos.web3j.abi.Utils.typeMap(to, Address.class)),
                assetId.isEmpty()? DynamicArray.empty("uint256[]"):new DynamicArray<Uint256>(
                        org.fisco.bcos.web3j.abi.Utils.typeMap(assetId, Uint256.class)),
                new DynamicBytes(data)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void batchSendFrom(String from, List<String> to, List<BigInteger> assetId, byte[] data, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_BATCHSENDFROM, 
                Arrays.<Type>asList(new Address(from),
                to.isEmpty()? DynamicArray.empty("address[]"):new DynamicArray<Address>(
                        org.fisco.bcos.web3j.abi.Utils.typeMap(to, Address.class)),
                assetId.isEmpty()? DynamicArray.empty("uint256[]"):new DynamicArray<Uint256>(
                        org.fisco.bcos.web3j.abi.Utils.typeMap(assetId, Uint256.class)),
                new DynamicBytes(data)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String batchSendFromSeq(String from, List<String> to, List<BigInteger> assetId, byte[] data) {
        final Function function = new Function(
                FUNC_BATCHSENDFROM, 
                Arrays.<Type>asList(new Address(from),
                to.isEmpty()? DynamicArray.empty("address[]"):new DynamicArray<Address>(
                        org.fisco.bcos.web3j.abi.Utils.typeMap(to, Address.class)),
                assetId.isEmpty()? DynamicArray.empty("uint256[]"):new DynamicArray<Uint256>(
                        org.fisco.bcos.web3j.abi.Utils.typeMap(assetId, Uint256.class)),
                new DynamicBytes(data)),
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple4<String, List<String>, List<BigInteger>, byte[]> getBatchSendFromInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_BATCHSENDFROM, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<DynamicArray<Address>>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicBytes>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple4<String, List<String>, List<BigInteger>, byte[]>(

                (String) results.get(0).getValue(), 
                convertToNative((List<Address>) results.get(1).getValue()), 
                convertToNative((List<Uint256>) results.get(2).getValue()), 
                (byte[]) results.get(3).getValue()
                );
    }

    public RemoteCall<String> description() {
        final Function function = new Function(FUNC_DESCRIPTION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> destroy(BigInteger assetId, byte[] data) {
        final Function function = new Function(
                FUNC_DESTROY, 
                Arrays.<Type>asList(new Uint256(assetId),
                new DynamicBytes(data)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void destroy(BigInteger assetId, byte[] data, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_DESTROY, 
                Arrays.<Type>asList(new Uint256(assetId),
                new DynamicBytes(data)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String destroySeq(BigInteger assetId, byte[] data) {
        final Function function = new Function(
                FUNC_DESTROY, 
                Arrays.<Type>asList(new Uint256(assetId),
                new DynamicBytes(data)),
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple2<BigInteger, byte[]> getDestroyInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_DESTROY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<DynamicBytes>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple2<BigInteger, byte[]>(

                (BigInteger) results.get(0).getValue(), 
                (byte[]) results.get(1).getValue()
                );
    }

    public RemoteCall<TransactionReceipt> generateBlindBoxCat(byte[] requestId) {
        final Function function = new Function(
                FUNC_GENERATEBLINDBOXCAT, 
                Arrays.<Type>asList(new Bytes32(requestId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void generateBlindBoxCat(byte[] requestId, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_GENERATEBLINDBOXCAT, 
                Arrays.<Type>asList(new Bytes32(requestId)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String generateBlindBoxCatSeq(byte[] requestId) {
        final Function function = new Function(
                FUNC_GENERATEBLINDBOXCAT, 
                Arrays.<Type>asList(new Bytes32(requestId)),
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple1<byte[]> getGenerateBlindBoxCatInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_GENERATEBLINDBOXCAT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<byte[]>(

                (byte[]) results.get(0).getValue()
                );
    }

    public RemoteCall<Tuple6<BigInteger, String, String, BigInteger, String, String>> generatedCats(BigInteger param0) {
        final Function function = new Function(FUNC_GENERATEDCATS, 
                Arrays.<Type>asList(new Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteCall<Tuple6<BigInteger, String, String, BigInteger, String, String>>(
                new Callable<Tuple6<BigInteger, String, String, BigInteger, String, String>>() {
                    @Override
                    public Tuple6<BigInteger, String, String, BigInteger, String, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple6<BigInteger, String, String, BigInteger, String, String>(
                                (BigInteger) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (String) results.get(4).getValue(), 
                                (String) results.get(5).getValue());
                    }
                });
    }

    public RemoteCall<String> getApproved(BigInteger assetId) {
        final Function function = new Function(FUNC_GETAPPROVED, 
                Arrays.<Type>asList(new Uint256(assetId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<Tuple6<BigInteger, String, String, BigInteger, String, String>> getCatInfo(BigInteger catId) {
        final Function function = new Function(FUNC_GETCATINFO, 
                Arrays.<Type>asList(new Uint256(catId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteCall<Tuple6<BigInteger, String, String, BigInteger, String, String>>(
                new Callable<Tuple6<BigInteger, String, String, BigInteger, String, String>>() {
                    @Override
                    public Tuple6<BigInteger, String, String, BigInteger, String, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple6<BigInteger, String, String, BigInteger, String, String>(
                                (BigInteger) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (String) results.get(4).getValue(), 
                                (String) results.get(5).getValue());
                    }
                });
    }

    public RemoteCall<BigInteger> getLength() {
        final Function function = new Function(FUNC_GETLENGTH, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<Boolean> isApprovedForAll(String owner, String operator) {
        final Function function = new Function(FUNC_ISAPPROVEDFORALL, 
                Arrays.<Type>asList(new Address(owner),
                new Address(operator)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<Boolean> isIssuer(String account) {
        final Function function = new Function(FUNC_ISISSUER, 
                Arrays.<Type>asList(new Address(account)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<Boolean> isOwner() {
        final Function function = new Function(FUNC_ISOWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<Boolean> isSuspender(String account) {
        final Function function = new Function(FUNC_ISSUSPENDER, 
                Arrays.<Type>asList(new Address(account)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<TransactionReceipt> issueWithAssetURI(String to, BigInteger assetId, String assetURI, byte[] data) {
        final Function function = new Function(
                FUNC_ISSUEWITHASSETURI, 
                Arrays.<Type>asList(new Address(to),
                new Uint256(assetId),
                new Utf8String(assetURI),
                new DynamicBytes(data)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void issueWithAssetURI(String to, BigInteger assetId, String assetURI, byte[] data, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_ISSUEWITHASSETURI, 
                Arrays.<Type>asList(new Address(to),
                new Uint256(assetId),
                new Utf8String(assetURI),
                new DynamicBytes(data)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String issueWithAssetURISeq(String to, BigInteger assetId, String assetURI, byte[] data) {
        final Function function = new Function(
                FUNC_ISSUEWITHASSETURI, 
                Arrays.<Type>asList(new Address(to),
                new Uint256(assetId),
                new Utf8String(assetURI),
                new DynamicBytes(data)),
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple4<String, BigInteger, String, byte[]> getIssueWithAssetURIInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ISSUEWITHASSETURI, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<DynamicBytes>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple4<String, BigInteger, String, byte[]>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (byte[]) results.get(3).getValue()
                );
    }

    public Tuple1<Boolean> getIssueWithAssetURIOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_ISSUEWITHASSETURI, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public RemoteCall<String> owner() {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<String> ownerOf(BigInteger assetId) {
        final Function function = new Function(FUNC_OWNEROF, 
                Arrays.<Type>asList(new Uint256(assetId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> renounceIssuer() {
        final Function function = new Function(
                FUNC_RENOUNCEISSUER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void renounceIssuer(TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_RENOUNCEISSUER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String renounceIssuerSeq() {
        final Function function = new Function(
                FUNC_RENOUNCEISSUER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<TransactionReceipt> renounceSuspender() {
        final Function function = new Function(
                FUNC_RENOUNCESUSPENDER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void renounceSuspender(TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_RENOUNCESUSPENDER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String renounceSuspenderSeq() {
        final Function function = new Function(
                FUNC_RENOUNCESUSPENDER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<TransactionReceipt> requestNewBlindboxCat(BigInteger userProvidedSeed, String name) {
        final Function function = new Function(
                FUNC_REQUESTNEWBLINDBOXCAT, 
                Arrays.<Type>asList(new Uint256(userProvidedSeed),
                new Utf8String(name)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void requestNewBlindboxCat(BigInteger userProvidedSeed, String name, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_REQUESTNEWBLINDBOXCAT, 
                Arrays.<Type>asList(new Uint256(userProvidedSeed),
                new Utf8String(name)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String requestNewBlindboxCatSeq(BigInteger userProvidedSeed, String name) {
        final Function function = new Function(
                FUNC_REQUESTNEWBLINDBOXCAT, 
                Arrays.<Type>asList(new Uint256(userProvidedSeed),
                new Utf8String(name)),
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple2<BigInteger, String> getRequestNewBlindboxCatInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REQUESTNEWBLINDBOXCAT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple2<BigInteger, String>(

                (BigInteger) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public Tuple1<byte[]> getRequestNewBlindboxCatOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_REQUESTNEWBLINDBOXCAT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<byte[]>(

                (byte[]) results.get(0).getValue()
                );
    }

    public RemoteCall<TransactionReceipt> sendFrom(String from, String to, BigInteger assetId, byte[] data) {
        final Function function = new Function(
                FUNC_SENDFROM, 
                Arrays.<Type>asList(new Address(from),
                new Address(to),
                new Uint256(assetId),
                new DynamicBytes(data)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void sendFrom(String from, String to, BigInteger assetId, byte[] data, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_SENDFROM, 
                Arrays.<Type>asList(new Address(from),
                new Address(to),
                new Uint256(assetId),
                new DynamicBytes(data)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String sendFromSeq(String from, String to, BigInteger assetId, byte[] data) {
        final Function function = new Function(
                FUNC_SENDFROM, 
                Arrays.<Type>asList(new Address(from),
                new Address(to),
                new Uint256(assetId),
                new DynamicBytes(data)),
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple4<String, String, BigInteger, byte[]> getSendFromInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SENDFROM, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<DynamicBytes>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple4<String, String, BigInteger, byte[]>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue(), 
                (byte[]) results.get(3).getValue()
                );
    }

    public RemoteCall<TransactionReceipt> setApprovalForAll(String to, Boolean approved) {
        final Function function = new Function(
                FUNC_SETAPPROVALFORALL, 
                Arrays.<Type>asList(new Address(to),
                new Bool(approved)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void setApprovalForAll(String to, Boolean approved, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_SETAPPROVALFORALL, 
                Arrays.<Type>asList(new Address(to),
                new Bool(approved)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String setApprovalForAllSeq(String to, Boolean approved) {
        final Function function = new Function(
                FUNC_SETAPPROVALFORALL, 
                Arrays.<Type>asList(new Address(to),
                new Bool(approved)),
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple2<String, Boolean> getSetApprovalForAllInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETAPPROVALFORALL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple2<String, Boolean>(

                (String) results.get(0).getValue(), 
                (Boolean) results.get(1).getValue()
                );
    }

    public RemoteCall<String> shortName() {
        final Function function = new Function(FUNC_SHORTNAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> suspend() {
        final Function function = new Function(
                FUNC_SUSPEND, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void suspend(TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_SUSPEND, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String suspendSeq() {
        final Function function = new Function(
                FUNC_SUSPEND, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<Boolean> suspended() {
        final Function function = new Function(FUNC_SUSPENDED, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<BigInteger> totalSupply() {
        final Function function = new Function(FUNC_TOTALSUPPLY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> transferOwnership(String newOwner) {
        final Function function = new Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new Address(newOwner)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void transferOwnership(String newOwner, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new Address(newOwner)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String transferOwnershipSeq(String newOwner) {
        final Function function = new Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new Address(newOwner)),
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple1<String> getTransferOwnershipInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public RemoteCall<TransactionReceipt> unSuspend() {
        final Function function = new Function(
                FUNC_UNSUSPEND, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void unSuspend(TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_UNSUSPEND, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String unSuspendSeq() {
        final Function function = new Function(
                FUNC_UNSUSPEND, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    @Deprecated
    public static CatBlindbox load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new CatBlindbox(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static CatBlindbox load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new CatBlindbox(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static CatBlindbox load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new CatBlindbox(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static CatBlindbox load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new CatBlindbox(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<CatBlindbox> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, String randomOracle) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Address(randomOracle)));
        return deployRemoteCall(CatBlindbox.class, web3j, credentials, contractGasProvider, getBinary(), encodedConstructor);
    }

    public static RemoteCall<CatBlindbox> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, String randomOracle) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Address(randomOracle)));
        return deployRemoteCall(CatBlindbox.class, web3j, transactionManager, contractGasProvider, getBinary(), encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<CatBlindbox> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String randomOracle) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Address(randomOracle)));
        return deployRemoteCall(CatBlindbox.class, web3j, credentials, gasPrice, gasLimit, getBinary(), encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<CatBlindbox> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String randomOracle) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Address(randomOracle)));
        return deployRemoteCall(CatBlindbox.class, web3j, transactionManager, gasPrice, gasLimit, getBinary(), encodedConstructor);
    }

    public static class ApprovalEventResponse {
        public Log log;

        public String owner;

        public String approved;

        public BigInteger assetId;
    }

    public static class ApprovalForAllEventResponse {
        public Log log;

        public String owner;

        public String operator;

        public Boolean approved;
    }

    public static class IssuerAddedEventResponse {
        public Log log;

        public String account;
    }

    public static class IssuerRemovedEventResponse {
        public Log log;

        public String account;
    }

    public static class OwnershipTransferredEventResponse {
        public Log log;

        public String previousOwner;

        public String newOwner;
    }

    public static class ResultOfNewBlindboxCatEventResponse {
        public Log log;

        public String sender;

        public String catName;

        public byte[] requestId;
    }

    public static class SendEventResponse {
        public Log log;

        public String operator;

        public String from;

        public String to;

        public BigInteger assetId;

        public byte[] data;
    }

    public static class SurpriseCatEventResponse {
        public Log log;

        public byte[] requestId;

        public String name;

        public String series;

        public BigInteger birthTime;

        public String owner;

        public String images;
    }

    public static class SuspendedEventResponse {
        public Log log;

        public String account;
    }

    public static class SuspenderAddedEventResponse {
        public Log log;

        public String account;
    }

    public static class SuspenderRemovedEventResponse {
        public Log log;

        public String account;
    }

    public static class UnSuspendedEventResponse {
        public Log log;

        public String account;
    }
}
